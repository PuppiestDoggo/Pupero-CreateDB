from pydantic import BaseModel, EmailStr, Field
from typing import Optional, List
from datetime import datetime

# ---------------------
# User/Auth Schemas
# ---------------------

# Register
class UserRegister(BaseModel):
    email: EmailStr
    username: str
    password: str

# Login
class UserLogin(BaseModel):
    username: Optional[str] = None
    email: Optional[EmailStr] = None
    password: str
    totp: Optional[str] = None
    remember_me: Optional[bool] = False

# Token
class Token(BaseModel):
    access_token: str
    refresh_token: str
    token_type: str = "bearer"

# Refresh
class TokenRefresh(BaseModel):
    refresh_token: str

# Password Reset Request
class PasswordResetRequest(BaseModel):
    email: EmailStr

# User Profile
class UserProfile(BaseModel):
    email: EmailStr
    username: Optional[str] = None
    role: str
    phrase: str

# Update User
class UserUpdate(BaseModel):
    phrase: Optional[str] = None
    username: Optional[str] = None
    new_email: Optional[EmailStr] = None
    current_password: Optional[str] = None
    new_password: Optional[str] = None

# TOTP Enable
class TOTPEnableResponse(BaseModel):
    secret: str
    qr_code: str  # Base64 encoded QR image

class TOTPEnableConfirm(BaseModel):
    secret: str
    code: str  # 2FA code generated by the authenticator app

# Delete Account
class DeleteAccountRequest(BaseModel):
    current_password: str
    totp: Optional[str] = None
    confirm: bool = False

# ---------------------
# Offers Schemas
# ---------------------

# Input Schemas
class OfferCreate(BaseModel):
    title: str = Field(min_length=1, max_length=255)
    desc: str = Field(min_length=1, max_length=2048)
    price: float = Field(gt=0)
    seller_id: Optional[int] = 0

class OfferUpdate(BaseModel):
    title: Optional[str] = Field(default=None, min_length=1, max_length=255)
    desc: Optional[str] = Field(default=None, min_length=1, max_length=2048)
    price: Optional[float] = Field(default=None, gt=0)
    status: Optional[str] = Field(default=None, min_length=2, max_length=32)

class BidCreate(BaseModel):
    bid: float = Field(gt=0)
    buyer_id: Optional[int] = 0

# Output Schemas
class OfferOut(BaseModel):
    id: str
    title: str
    desc: str
    price: float
    seller_id: int
    status: str
    timestamp: datetime

class TransactionOut(BaseModel):
    id: int
    offer_id: int
    buyer_id: int
    seller_id: int
    amount: float
    status: str
    tx_hash: str
    created_at: datetime
